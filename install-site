#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("/var/slimstk/slimstk.php");
slimstk_init ();

$enable_ssl = 0;

$siteid = preg_replace ('/[.].*/', '', basename (getcwd ()));
if (! preg_match ('/-/', $siteid))
	$siteid .= sprintf ("-%s", $_SERVER['USER']);

$config = array ();
$config['siteid'] = $siteid;

preg_match ('/^(.*)-([^-]*)$/', $siteid, $parts);
$config['site_name'] = $parts[1];
$config['conf_key'] = $parts[2];

if ($running_on_aws) {
	$sinfo = NULL;
	foreach ($stkinfo['sites'] as $name => $sinfo) {
		if (strcmp ($name, $siteid) == 0)
			break;
	}

	if ($sinfo == NULL) {
		printf ("can't find siteid %s\n", $siteid);
		exit (1);
	}

	$region = $stkinfo['region'];

	$config['url_name'] = $sinfo['dns_name'];
	$config['site_port'] = 80;

	if ($enable_ssl) {
		$config['ssl_port'] = 443;

		$keyfile = sprintf ("%s.key", $config['url_name']);
		$kmsfile = sprintf ("%s.%s.kms", $keyfile, $region);
		if (file_exists ($kmsfile) && ! file_exists ($keyfile)) {
			$cmd = sprintf ("%s/slimstk-inst/kms-decrypt %s %s %s",
					$_SERVER['HOME'],
					$region, $kmsfile, $keyfile);
			printf ("running: %s\n", $cmd);
			system ($cmd, $rc);
			if ($rc != 0) {
				printf ("error running: %s\n", $cmd);
				exit (1);
			}
			chmod ($keyfile, 0600);
		}
	}

} else {
	$nat_info_file = sprintf ("%s/NAT_INFO", $apache_dir);
	$nat_info = @file_get_contents ($nat_info_file);
	if (sscanf ($nat_info, "%s %d", $name, $base) == 2) {
		$config['url_name'] = $name;
		$port_base = $base;
	} else {
		$config['url_name'] = "local.apebble.com";
		$port_base = 8000;
	}
	$port_end = $port_base + 900;
}

function find_ports () {
	global $port_base, $port_end, $ports_used;
	global $apache_dir, $siteid;
	global $config;

	$ubuntu_version = intval (shell_exec ("lsb_release -rs"));
	if ($ubuntu_version >= 14)
		$suffix = ".conf";

	$fname = sprintf ("%s/sites-available/%s%s",
			  $apache_dir, $siteid, $suffix);
	$my_prev_ports = array ();
	if (($f = @fopen ($fname, "r")) != NULL) {
		while (($row = fgets ($f)) != NULL) {
			if (sscanf ($row, "Listen %d", $port) == 1) {
				$my_prev_ports[] = $port;
			}
		}
	}

	if (count ($my_prev_ports) >= 1)
		$config['site_port'] = $my_prev_ports[0];

	if (count ($my_prev_ports) >= 2)
		$config['ssl_port'] = @$my_prev_ports[1];

	exec ("grep --no-filename '^[ 	]*Listen'"
	      ." /etc/apache2/conf.d/*"
	      ." /etc/apache2/sites-enabled/*"
	      ." 2> /dev/null",
	      $outlines);
	$ports_used = array ();
	foreach ($outlines as $row) {
		if (sscanf ($row, "Listen %d", $port) == 1) {
			$ports_used[$port] = 1;
		}
	}
}

function alloc_port () {
	global $ports_used, $port_end, $port_base;
	
	if (! isset ($ports_used))
		find_ports ();

	for ($port = $port_end - 1; $port >= $port_base; $port--) {
		if (! isset ($ports_used[$port])) {
			$ports_used[$port] = 1;
			return ($port);
		}
	}
	return (-1);
}

if (! isset ($config['site_port']))
	$config['site_port'] = alloc_port ();

if ($enable_ssl && ! isset ($config['ssl_port']))
	$config['ssl_port'] = alloc_port ();

$config['site_url'] = make_url ($config['url_name'], $config['site_port'], 0);
if ($enable_ssl) {
	$config['ssl_url'] = make_url ($config['url_name'],
				       $config['ssl_port'], 1);
}

$apache_conf = "";

function make_url ($host, $port, $ssl_flag) {
	if ($ssl_flag) {
		if ($port == 443) {
			return (sprintf ("https://%s/", $host));
		} else {
			return (sprintf ("https://%s:%d/", $host, $port));
		}
	} else {
		if ($port == 80) {
			return (sprintf ("http://%s/", $host));
		} else {
			return (sprintf ("http://%s:%d/", $host, $port));
		}
	}
}

function make_ssl_params ($base) {
	$crtname = sprintf ("%s.crt", $base);
	$keyname = sprintf ("%s.key", $base);
	$chainname = sprintf ("%s.chain.pem", $base);

	if (! file_exists ($crtname))
		return (NULL);

	if (! file_exists ($keyname))
		return (NULL);

	if (! file_exists ($chainname))
		return (NULL);

	$ret = sprintf ("  SSLCertificateKeyFile %s\n"
			."  SSLCertificateFile %s\n"
			."  SSLCertificateChainFile %s\n",
			$keyname, $crtname, $chainname);
	return ($ret);
}

function find_ssl_files ($name) {
	global $apache_dir;

	$base = sprintf ("%s/%s", getcwd (), $name);
	if (($ret = make_ssl_params ($base)) != NULL)
		return ($ret);

	$base = sprintf ("%s/%s", $apache_dir, $name);
	if (($ret = make_ssl_params ($base)) != NULL)
		return ($ret);

	$wild = preg_replace ("/^[^.]*[.]/", "wildcard.", $name);
	$base = sprintf ("%s/%s", $apache_dir, $wild);
	if (($ret = make_ssl_params ($base)) != NULL)
		return ($ret);

	return (NULL);
}

function make_virtual_host ($args) {
	global $apache_dir;

	$ret = "";

	if ($args->port != 80 && $args->port != 443) {
		$ret .= sprintf ("Listen %d\n", $args->port);
	}

	if (strncmp ($args->name, "www.", 4) == 0) {
		$with_www = $args->name;
		$without_www = substr ($args->name, 4);
	} else {
		$with_www = "www.".$args->name;
		$without_www = $args->name;
	}

	$ipaddr = "*";
	if (isset ($args->ssl_ipaddr))
		$ipaddr = $args->ssl_ipaddr;
	$ret .= sprintf ("<VirtualHost %s:%d>\n", $ipaddr, $args->port);

	$ret .= sprintf ("  ServerName %s\n", $with_www);
	$ret .= sprintf ("  ServerAlias %s\n", $without_www);

	$ret .= sprintf ("  DocumentRoot %s/website\n", getcwd ());
	$ret .= sprintf ("  FileETag none\n");

	$ret .= sprintf ("  php_flag session.gc_probability 0\n");
	$ret .= sprintf ("  php_flag html_errors On\n");
	$ret .= sprintf ("  php_flag display_errors On\n");

	if ($args->ssl_flag) {
		$ret .= sprintf ("  SSLEngine on\n");

		if (($ssl = find_ssl_files ($args->name)) == NULL) {
			printf ("can't find ssl files for %s\n", $args->name);
			exit (1);
		}

		$ret .= $ssl;
	}
		
	$ret .= "\n";

	$ret .= "  RewriteEngine on\n";
	$ret .= "\n";

	$desturl = make_url ($args->name, $args->port, $args->ssl_flag);
	$desturl = rtrim ($desturl, '/');

	$ret .= sprintf ("  RewriteCond %%{HTTP_HOST} ^%s [NC]\n",
			 $with_www);
	$ret .= sprintf ("  RewriteRule ^(.*) %s\$1 [R]\n", $desturl);

	$ret .= "\n";

	$ret .= "  Redirect permanent /deploy /deploy.php\n";

	if (0) {
		$ret .= "  LogLevel debug\n";
	}
	$ret .= "</VirtualHost>\n\n";

	return ($ret);
}

$evars = array ();
$evars['siteid'] = $config['siteid'];
$evars['site_name'] = $config['site_name'];
$evars['conf_key'] = $config['conf_key'];

$apache_conf = "";

$apache_conf .= sprintf ("<Directory %s/website>\n", getcwd ());
$apache_conf .= "  Options Indexes FollowSymLinks\n";
$apache_conf .= "  AllowOverride None\n";
$apache_conf .= "  Allow from all\n";
if (! $running_on_aws)
	$apache_conf .= "  Require all granted\n";

foreach ($evars as $name => $val) {
	$apache_conf .= sprintf ("  SetEnv %s \"%s\"\n",
				 $name, addslashes ($val));
}

$apache_conf .= "</Directory>\n";
$apache_conf .= "\n";

$args = (object)NULL;
$args->name = $config['url_name'];
$args->port = $config['site_port'];
$args->ssl_flag = 0;
$apache_conf .= make_virtual_host ($args);

if ($enable_ssl) {
	$args = (object)NULL;
	$args->name = $config['url_name'];
	$args->port = $config['ssl_port'];
	$args->ssl_flag = 1;
	$apache_conf .= make_virtual_host ($args);
}

$tmpname = "TMP.apache.conf";
file_put_contents ($tmpname, $apache_conf);

$issue = file_get_contents ("/etc/issue");

if (preg_match ('/Ubuntu/', $issue)) {
	system ("./apache-ubuntu", $rc);
	if ($rc)
		exit (1);
} else if (preg_match ('/Amazon/', $issue)) {
	system ("./apache-amazon", $rc);
	if ($rc)
		exit (1);
} else {
	printf ("unknown system type\n");
	exit (1);
}

if ($running_on_aws && array_search ("setup-elb", $_SERVER['argv'])) {
	system ("./setdns-elb", $rc);
}

printf ("%s\n", $config['site_url']);
if ($enable_ssl)
	printf ("%s\n", $config['ssl_url']);

file_put_contents ("TMP.config.js", json_encode ($config)."\n");
